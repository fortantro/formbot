import telebot
import random
import telebot
import random
import time
import requests
import os
from telebot import types
import threading
from flask import Flask, request, jsonify
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Flask –∏ –±–æ—Ç–∞
app = Flask(__name__)
token = os.getenv('BOT_TOKEN')
logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–π —Ç–æ–∫–µ–Ω: {token[:10]}...")  # –õ–æ–≥–∏—Ä—É–µ–º —á–∞—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
bot = telebot.TeleBot(token)
WEBHOOK_URL = os.getenv('WEBHOOK_URL')
logger.info(f"WEBHOOK_URL: {WEBHOOK_URL}")

logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
logger.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏: {bot.message_handlers}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
ADMINS = [716559083]
roles = {}
players = {}
dead_players_messages = {}
game_started = False
chat_id = None
roles_assigned = {}
votes = {}
voting_active = False
playersplay = {}
message_ids = {}
role_descriptions = {
    '–ö–∞—Ä–∏–Ω–∫–∞': "–í—ã - –º–∞—Ñ–∏—è üïµÔ∏è‚Äç‚ôÇÔ∏è. –í–∞—à–∞ —Ü–µ–ª—å - —É—Å—Ç—Ä–∞–Ω–∏—Ç—å –º–∏—Ä–Ω—ã—Ö –∂–∏—Ç–µ–ª–µ–π.",
    '–°–µ–ª—è—Ö': "–í—ã - –∫–æ–º–∏—Å—Å–∞—Ä üî´. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç—å –∫ –º–∞—Ñ–∏–∏, –Ω–æ —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —É–±–∏–≤ –∏–≥—Ä–æ–∫–∞.",
    '–°–∞—à–∞ –î–æ–∫—Ç–æ—Ä': "–í—ã –¥–æ–∫—Ç–æ—Ä ü©∫. –ú–æ–∂–µ—Ç–µ —Å–ø–∞—Å–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –æ—Ç —É–±–∏–π—Å—Ç–≤–∞.",
    '–†–∞–¥—á–∏–∫': "–í—ã - –º–∞–Ω—å—è–∫ üî™. –í—ã —É–±–∏–≤–∞–µ—Ç–µ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∫–∞–∂–¥—É—é –Ω–æ—á—å. –í–∞—à–∞ —Ü–µ–ª—å - —É–±–∏—Ç—å –≤—Å–µ—Ö.",
    '–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å': "–í—ã - –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å üè°. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –≤—ã—è–≤–∏—Ç—å –º–∞—Ñ–∏—é –∏ –ª–∏–Ω—á–µ–≤–∞—Ç—å –µ—ë –Ω–∞ –¥–Ω–µ–≤–Ω–æ–º —Å–æ–±—Ä–∞–Ω–∏–∏.",
    '–î—ã—Ç–º–∞–Ω': "–í—ã - –ø—É—Ç–∞–Ω–∞ üíÉ. –í—ã –º–æ–∂–µ—Ç–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ö–æ–¥ –Ω–æ—á—å—é –ª—é–±–æ–º—É –∏–≥—Ä–æ–∫—É.",
    '–ú–∞—Ä–∏–Ω–∞ –í–∏–∫—Ç–æ—Ä–∏—è': "–í—ã - —Å–∞–º–æ—É–±–∏–π—Ü–∞ üíî. –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - —É–º–µ—Ä–µ—Ç—å –Ω–∞ –¥–Ω–µ–≤–Ω–æ–º —Å–æ–±—Ä–∞–Ω–∏–∏.",
    '–ú–∞—Ç–≤–µ–π': "–í—ã - –±–æ–º–∂ üß≥. –í—ã –º–æ–∂–µ—Ç–µ —Ö–æ–¥–∏—Ç—å –∫ –¥—Ä—É–≥–∏–º –∏–≥—Ä–æ–∫–∞–º –∏ —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è —Å–≤–∏–¥–µ—Ç–µ–ª–µ–º –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–π.",
    '–õ–∏–ª–∏—è –§–µ–¥–æ—Ä–æ–≤–Ω–∞': "–í—ã - —à–∏–∑–∏–∫ ü§™. –í–∞—à –≥–æ–ª–æ—Å –Ω–∞ –¥–Ω–µ–≤–Ω–æ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ —É–¥–≤–∞–∏–≤–∞–µ—Ç—Å—è.",
    '–Æ–ª–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞': "–í—ã - –≤–æ–ª–∫ üê∫. –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤—ã –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å, –Ω–æ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –º–∞—Ñ–∏—è —É–º—Ä—ë—Ç, –≤—ã –∑–∞–π–º—ë—Ç–µ –∏—Ö –º–µ—Å—Ç–æ.",
    '–®–ø–∏–æ–Ω': "–í—ã - —à–ø–∏–æ–Ω üï∂Ô∏è. –†–∞–±–æ—Ç–∞–µ—Ç–µ –Ω–∞ –º–∞—Ñ–∏—é. –ö–∞–∂–¥—É—é –Ω–æ—á—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –∏ —É–∑–Ω–∞—Ç—å –µ–≥–æ —Ä–æ–ª—å. –≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤–∞–º –∏ –º–∞—Ñ–∏–∏ —É—Ç—Ä–æ–º.",
    '–ü–∞–≤–ª—É—à–∞': "–í—ã - —Ö–∞–∫–µ—Ä üíæ. –í–∞—à–∞ —Ü–µ–ª—å - –≤—ã–∂–∏—Ç—å –¥–æ –∫–æ–Ω—Ü–∞ –∏–≥—Ä—ã. –ö–∞–∂–¥—É—é –Ω–æ—á—å –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –∏–≥—Ä–æ–∫–∞ –∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ —Ä–æ–ª—å, —á—Ç–æ–±—ã –æ–Ω –Ω–µ —Å–º–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å."
}

role_tips = {
    '–ö–∞—Ä–∏–Ω–∫–∞': (
        "üîπ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ –≤—ã–¥–∞–≤–∞—Ç—å —Å–µ–±—è –¥–Ω—ë–º\n"
        "üîπ –î–æ–≥–æ–≤–æ—Ä–∏—Ç–µ—Å—å —Å–æ —à–ø–∏–æ–Ω–æ–º –¥–ª—è –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏\n"
        "üîπ –£–±–∏–≤–∞–π—Ç–µ —Å–∞–º—ã—Ö –æ–ø–∞—Å–Ω—ã—Ö –¥–ª—è –≤–∞—Å —Ä–æ–ª–µ–π (–∫–æ–º–∏—Å—Å–∞—Ä–∞, –¥–æ–∫—Ç–æ—Ä–∞)"
    ),
    '–°–µ–ª—è—Ö': (
        "üîπ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
        "üîπ –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏\n"
        "üîπ –î–æ–∫—Ç–æ—Ä –º–æ–∂–µ—Ç –≤–∞—Å –∑–∞—â–∏—Ç–∏—Ç—å - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è"
    ),
    '–°–∞—à–∞ –î–æ–∫—Ç–æ—Ä': (
        "üîπ –ó–∞—â–∏—â–∞–π—Ç–µ —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–∫–æ–º–∏—Å—Å–∞—Ä–∞, —Å–µ–±—è)\n"
        "üîπ –ú–µ–Ω—è–π—Ç–µ —Ç–∞–∫—Ç–∏–∫—É –∑–∞—â–∏—Ç—ã, —á—Ç–æ–±—ã –º–∞—Ñ–∏—è –Ω–µ —É–≥–∞–¥–∞–ª–∞\n"
        "üîπ –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ, –∫–æ–≥–æ –∑–∞—â–∏—Ç–∏–ª–∏"
    ),
    '–†–∞–¥—á–∏–∫': (
        "üîπ –£–±–∏–≤–∞–π—Ç–µ –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –≤–∞—Å –≤—ã—á–∏—Å–ª–∏—Ç—å\n"
        "üîπ –ú–∞—Å–∫–∏—Ä—É–π—Ç–µ—Å—å –ø–æ–¥ –º–∏—Ä–Ω–æ–≥–æ –∂–∏—Ç–µ–ª—è\n"
        "üîπ –ü–æ–º–Ω–∏—Ç–µ - –≤—ã –∏–≥—Ä–∞–µ—Ç–µ –ø—Ä–æ—Ç–∏–≤ –≤—Å–µ—Ö, –¥–∞–∂–µ –ø—Ä–æ—Ç–∏–≤ –º–∞—Ñ–∏–∏"
    ),
    '–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å': (
        "üîπ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö\n"
        "üîπ –ù–µ –¥–æ–≤–µ—Ä—è–π—Ç–µ —Å–ª–µ–ø–æ –æ–±–≤–∏–Ω–µ–Ω–∏—è–º\n"
        "üîπ –ò—â–∏—Ç–µ –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏—è –≤ —Å–ª–æ–≤–∞—Ö –∏–≥—Ä–æ–∫–æ–≤"
    ),
    '–î—ã—Ç–º–∞–Ω': (
        "üîπ –ë–ª–æ–∫–∏—Ä—É–π—Ç–µ —Å–∞–º—ã—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
        "üîπ –ú–µ–Ω—è–π—Ç–µ —Ü–µ–ª–∏, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—á–µ–≤–∏–¥–Ω–æ\n"
        "üîπ –ú–æ–∂–Ω–æ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–æ–≥–æ –∏ —Ç–æ–≥–æ –∂–µ –∏–≥—Ä–æ–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–æ—á–µ–π –ø–æ–¥—Ä—è–¥"
    ),
    '–ú–∞—Ä–∏–Ω–∞ –í–∏–∫—Ç–æ—Ä–∏—è': (
        "üîπ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Ç—å –∏–∑–≥–Ω–∞–Ω–Ω–æ–π –¥–Ω—ë–º\n"
        "üîπ –í—ã–±–∏—Ä–∞–π—Ç–µ –¥–ª—è –º–µ—Å—Ç–∏ —Å–∞–º—ã—Ö –æ–ø–∞—Å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
        "üîπ –ú–æ–∂–Ω–æ –∏–º–∏—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–≤–µ–¥–µ–Ω–∏–µ –º–∞—Ñ–∏–∏, —á—Ç–æ–±—ã –≤–∞—Å –∏–∑–≥–Ω–∞–ª–∏"
    ),
    '–ú–∞—Ç–≤–µ–π': (
        "üîπ –ü–æ—Å–µ—â–∞–π—Ç–µ —Ä–∞–∑–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏\n"
        "üîπ –í–∞—à–∏ –ø–æ–∫–∞–∑–∞–Ω–∏—è –º–æ–≥—É—Ç –±—ã—Ç—å —Ä–µ—à–∞—é—â–∏–º–∏ –¥–Ω—ë–º\n"
        "üîπ –ù–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–π—Ç–µ —Å—Ä–∞–∑—É, —á—Ç–æ –≤—ã —É–∑–Ω–∞–ª–∏"
    ),
    '–õ–∏–ª–∏—è –§–µ–¥–æ—Ä–æ–≤–Ω–∞': (
        "üîπ –í–∞—à –≥–æ–ª–æ—Å –≤–µ—Å–∏—Ç –±–æ–ª—å—à–µ - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ\n"
        "üîπ –ú–æ–∂–µ—Ç–µ –≤–ª–∏—è—Ç—å –Ω–∞ –∏—Å—Ö–æ–¥ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–π\n"
        "üîπ –ù–µ –∞—Ñ–∏—à–∏—Ä—É–π—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏"
    ),
    '–Æ–ª–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞': (
        "üîπ –í–µ–¥–∏—Ç–µ —Å–µ–±—è –∫–∞–∫ –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å, –ø–æ–∫–∞ –º–∞—Ñ–∏—è –∂–∏–≤–∞\n"
        "üîπ –ì–æ—Ç–æ–≤—å—Ç–µ—Å—å –∑–∞–º–µ–Ω–∏—Ç—å –º–∞—Ñ–∏—é, –∫–æ–≥–¥–∞ –æ–Ω–∞ –±—É–¥–µ—Ç —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞\n"
        "üîπ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ, –∫—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–∞—Ñ–∏–µ–π"
    ),
    '–®–ø–∏–æ–Ω': (
        "üîπ –î–µ–ª–∏—Ç–µ—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π —Å –º–∞—Ñ–∏–µ–π\n"
        "üîπ –ü—Ä–æ–≤–µ—Ä—è–π—Ç–µ —Å–∞–º—ã—Ö –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤\n"
        "üîπ –ú–∞—Å–∫–∏—Ä—É–π—Ç–µ—Å—å –ø–æ–¥ –º–∏—Ä–Ω–æ–≥–æ –∂–∏—Ç–µ–ª—è"
    ),
    '–ü–∞–≤–ª—É—à–∞': (
        "üîπ –ë–ª–æ–∫–∏—Ä—É–π—Ç–µ —Å–∞–º—ã–µ –æ–ø–∞—Å–Ω—ã–µ —Ä–æ–ª–∏ (–º–∞—Ñ–∏—é, –∫–æ–º–∏—Å—Å–∞—Ä–∞, –¥–æ–∫—Ç–æ—Ä–∞)\n"
        "üîπ –°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –æ—Å—Ç–∞—Ç—å—Å—è –Ω–µ–∑–∞–º–µ—á–µ–Ω–Ω—ã–º\n"
        "üîπ –í–∞—à–∞ —Ü–µ–ª—å - –≤—ã–∂–∏—Ç—å –ª—é–±–æ–π —Ü–µ–Ω–æ–π"
    )
}
NIGHT_DURATION = 60
DAY_DURATION = 80
PERERIV_DURATION = 40

# –§–ª–∞–≥–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
is_night = False
mafia_choice = None
commissar_choice = None
maniac_choice = None
hobo_choice = None
doctor_choice = None
lover_choice = None
spy_choice = None
hacker_choice = None
voting_in_progress = False
reg_id = None
message_text = None
reg_message = None
keyboardd = None
join_buttonn = None

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞
def set_webhook():
    try:
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞")
        bot_info = bot.get_me()
        logger.info(f"–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: @{bot_info.username}")
        logger.info("–£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä–æ–≥–æ –≤–µ–±—Ö—É–∫–∞")
        bot.remove_webhook()
        time.sleep(1)
        if not WEBHOOK_URL:
            raise ValueError("WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        logger.info(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±—Ö—É–∫–∞: {WEBHOOK_URL}")
        success = bot.set_webhook(
            url=WEBHOOK_URL,
            max_connections=40,
            allowed_updates=["message", "callback_query"]
        )
        if success:
            logger.info(f"–í–µ–±—Ö—É–∫ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")
        else:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤–µ–±—Ö—É–∫")
        webhook_info = bot.get_webhook_info()
        logger.info(f"–°—Ç–∞—Ç—É—Å –≤–µ–±—Ö—É–∫–∞: {webhook_info}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–µ–±—Ö—É–∫–∞: {str(e)}")

# –û—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –±–æ—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
def retry_on_connection_error(max_retries=5, delay=2):
    def decorator(func):
        def wrapper(*args, **kwargs):
            for attempt in range(max_retries):
                try:
                    return func(*args, **kwargs)
                except requests.exceptions.ConnectionError as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_retries}.")
                    time.sleep(delay)
                except Exception as e:
                    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                    break
        return wrapper
    return decorator

@bot.message_handler(commands=['secretqward'])
def secret_admin_panel(message):
    if message.from_user.id not in ADMINS:
        bot.send_message(message.chat.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    keyboard = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("üë• –ü–æ–∫–∞–∑–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤ –∏ —Ä–æ–ª–∏", callback_data="admin_show")
    btn2 = types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã", callback_data="admin_stats")
    keyboard.add(btn1, btn2)
    
    bot.send_message(message.chat.id, 
                    "üîê <b>–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=keyboard, 
                    parse_mode="HTML")

@bot.callback_query_handler(func=lambda call: call.data in ["admin_show", "admin_stats"])
def handle_admin_actions(call):
    if call.from_user.id not in ADMINS:
        bot.answer_callback_query(call.id, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    
    if call.data == "admin_show":
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
            players_info = "<b>üë• –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤:</b>\n\n"
            
            # –°–Ω–∞—á–∞–ª–∞ –∂–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏
            alive_players = []
            for player_id, player_name in players.items():
                if player_id in roles_assigned:  # –ò–≥—Ä–æ–∫ –∂–∏–≤
                    role = roles_assigned.get(player_id, "–†–æ–ª—å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞")
                    alive_players.append(f"üü¢ {player_name}: <b>{role}</b>")
            
            # –ó–∞—Ç–µ–º –º–µ—Ä—Ç–≤—ã–µ –∏–≥—Ä–æ–∫–∏ (–µ—Å—Ç—å –≤ playersplay, –Ω–æ –Ω–µ—Ç –≤ roles_assigned)
            dead_players = []
            for player_id, player_name in playersplay.items():
                if player_id not in roles_assigned and player_id in players:
                    dead_players.append(f"üî¥ {player_name}: <i>—É–±–∏—Ç</i>")
            
            # –°–æ–±–∏—Ä–∞–µ–º –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if alive_players:
                players_info += "<b>–ñ–∏–≤—ã–µ:</b>\n" + "\n".join(alive_players) + "\n\n"
            if dead_players:
                players_info += "<b>–ú–µ—Ä—Ç–≤—ã–µ:</b>\n" + "\n".join(dead_players)
            
            if not alive_players and not dead_players:
                players_info = "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ–± –∏–≥—Ä–æ–∫–∞—Ö"
            
            bot.send_message(call.from_user.id, players_info, parse_mode="HTML")
            bot.answer_callback_query(call.id, "–î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –õ–°!")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ admin_show: {e}")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö!")
    
    elif call.data == "admin_stats":
        try:
            # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_players = len(playersplay)
            alive_count = len(roles_assigned)
            dead_count = total_players - alive_count
            
            mafia_alive = any(role == '–ö–∞—Ä–∏–Ω–∫–∞' for role in roles_assigned.values())
            commissar_alive = any(role == '–°–µ–ª—è—Ö' for role in roles_assigned.values())
            doctor_alive = any(role == '–°–∞—à–∞ –î–æ–∫—Ç–æ—Ä' for role in roles_assigned.values())
            
            stats = f"""
üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:</b>

üë• –ò–≥—Ä–æ–∫–æ–≤ –≤—Å–µ–≥–æ: {total_players}
üü¢ –ñ–∏–≤—ã—Ö: {alive_count}
üî¥ –ú–µ—Ä—Ç–≤—ã—Ö: {dead_count}
üåÉ –¢–µ–∫—É—â–∞—è —Ñ–∞–∑–∞: {'–ù–æ—á—å' if is_night else '–î–µ–Ω—å'}

<b>–ö–ª—é—á–µ–≤—ã–µ —Ä–æ–ª–∏:</b>
üïµÔ∏è‚Äç‚ôÇÔ∏è –ú–∞—Ñ–∏—è: {'–∂–∏–≤–∞' if mafia_alive else '–º–µ—Ä—Ç–≤–∞'}
üî´ –ö–æ–º–∏—Å—Å–∞—Ä: {'–∂–∏–≤' if commissar_alive else '–º–µ—Ä—Ç–≤'}
ü©∫ –î–æ–∫—Ç–æ—Ä: {'–∂–∏–≤' if doctor_alive else '–º–µ—Ä—Ç–≤'}
"""
            bot.send_message(call.from_user.id, stats, parse_mode="HTML")
            bot.answer_callback_query(call.id, "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ admin_stats: {e}")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!")



def retry_on_connection_error(max_retries=5, delay=2):
    def decorator(func):
        def wrapper(*args, **kwargs):
            for attempt in range(max_retries):
                try:
                    return func(*args, **kwargs)
                except requests.exceptions.ConnectionError as e:
                    print(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {e}. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1} –∏–∑ {max_retries}.")
                    time.sleep(delay)
                except Exception as e:
                    print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
                    break
        return wrapper
    return decorator

@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(message.chat.id, "<b>–ü—Ä–∏–≤–µ—Ç‚úåÔ∏è, —ç—Ç–æ –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã –≤ –º–∞—Ñ–∏—é!</b>\n<i>–ù–∞–ø–∏—à–∏ /join, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.</i>", parse_mode='html')

@bot.message_handler(commands=['mstart'])
def start_registration(message):
    global game_started, chat_id, reg_id, reg_message, registration_message, keyboardd, join_buttonn
    if game_started:
        bot.send_message(message.chat.id, "<b>‚ùå –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!</b>", parse_mode='html')
        return
    
    chat_id = message.chat.id
    
    registration_message = "<b>üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∏–≥—Ä—É –≤ –º–∞—Ñ–∏—é –Ω–∞—á–∞—Ç–∞!</b>\n\n"
    
    if players:
        registration_message += "\n".join(players.values())
    else:
        registration_message += "<i>–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤.</i>"
    
    join_buttonn = types.InlineKeyboardButton(text="–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è", url=f"https://t.me/{bot.get_me().username}?start=join", callback_data="join_game")
    keyboardd = types.InlineKeyboardMarkup().add(join_buttonn)
    
    reg_message = bot.send_message(chat_id, registration_message, reply_markup=keyboardd, parse_mode='html')
    reg_id = reg_message.message_id
    
    chat_id = message.chat.id

@bot.message_handler(commands=['join'])
def join_game(message):
    if game_started:
        bot.send_message(message.chat.id, "<b>‚ùå –ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç!</b>\n<i>–î–æ–∂–¥–∏—Ç–µ—Å—å –µ—ë –æ–∫–æ–Ω—á–∞–Ω–∏—è.</i>", parse_mode='html')
        return
    if message.from_user.id in players:
        print(f"–ò–≥—Ä–æ–∫ {message.from_user.username} –ø—ã—Ç–∞–µ—Ç—Å—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è.")
        bot.send_message(message.chat.id, "<b>‚ùå –í—ã —É–∂–µ –≤ –∏–≥—Ä–µ!</b>", parse_mode='html')
        return
    
    players[message.from_user.id] = message.from_user.first_name
    playersplay[message.from_user.id] = message.from_user.first_name
    print(f"–ò–≥—Ä–æ–∫ {message.from_user.username} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–≥—Ä—É.")
    bot.send_message(chat_id, f"<b>üë§ {message.from_user.first_name}, –≤—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ!</b>", parse_mode='html')
    update_registered_users_message()

@bot.message_handler(commands=['start_game'])
def start_game(message):
    global game_started, playersplay
    if game_started:
        bot.send_message(chat_id, "<b>‚ùå –ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å!</b>", parse_mode='html')
        return
    
    if len(players) < 4:
        bot.send_message(chat_id, "<b>‚ùå –ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 4 –∏–≥—Ä–æ–∫–∞!</b>", parse_mode='html')
        return

    game_started = True
    print(playersplay)
    assign_roles()
    start_night()

@bot.message_handler(func=lambda message: True)
@retry_on_connection_error()
def handle_messages(message):
    global chat_id, dead_players_messages
    user_id = message.from_user.id
    print("–¢—É—Ç –ø–æ–∫–∞ –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
    if game_started:
        if is_night:
            try:
                bot.delete_message(message.chat.id, message.message_id)
                bot.send_message(message.from_user.id, "<b>üåô –ù–æ—á—å!</b>\n<i>–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –≤ —á–∞—Ç –≤–æ –≤—Ä–µ–º—è –Ω–æ—á–∏.</i>", parse_mode='html')
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        if user_id in playersplay and user_id not in players:
            print("–∑–¥–µ—Å—å –∫—Å—Ç–∞—Ç–∏ —Ç–æ–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            if user_id not in dead_players_messages:
                print("–≤–æ—Ç —Ç—É—Ç –Ω–∏—Ö—É—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                dead_players_messages[user_id] = message.text
                bot.send_message(chat_id, f"<b>üíÄ –ö—Ç–æ-—Ç–æ —Å–ª—ã—à–∞–ª, –∫–∞–∫ {message.from_user.first_name} –∫—Ä–∏—á–∞–ª:</b>\n<i>{message.text}</i>", parse_mode='html')
            else:
                try:
                    bot.delete_message(message.chat.id, message.message_id)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@retry_on_connection_error()
def assign_roles():
    global roles_assigned
    roles_assigned = {}
    num_players = len(players)
    
    if num_players == 4:
        roles = ['–ö–∞—Ä–∏–Ω–∫–∞', '–°–∞—à–∞ –î–æ–∫—Ç–æ—Ä', '–°–µ–ª—è—Ö'] + ['–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å']
    if num_players == 5:
        roles = ['–ö–∞—Ä–∏–Ω–∫–∞', '–°–∞—à–∞ –î–æ–∫—Ç–æ—Ä', '–°–µ–ª—è—Ö'] + ['–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å'] + ['–î—ã—Ç–º–∞–Ω']
    elif num_players == 6:
        roles = ['–ö–∞—Ä–∏–Ω–∫–∞', '–°–∞—à–∞ –î–æ–∫—Ç–æ—Ä', '–°–µ–ª—è—Ö'] + ['–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å'] + ['–î—ã—Ç–º–∞–Ω'] + ['–†–∞–¥—á–∏–∫']
    elif num_players == 7:
        roles = ['–ö–∞—Ä–∏–Ω–∫–∞', '–°–∞—à–∞ –î–æ–∫—Ç–æ—Ä', '–°–µ–ª—è—Ö'] + ['–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å'] + ['–î—ã—Ç–º–∞–Ω'] + ['–†–∞–¥—á–∏–∫'] + ['–®–ø–∏–æ–Ω']
    elif num_players == 8:
        roles = ['–ö–∞—Ä–∏–Ω–∫–∞', '–°–∞—à–∞ –î–æ–∫—Ç–æ—Ä', '–°–µ–ª—è—Ö'] + ['–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å'] + ['–î—ã—Ç–º–∞–Ω'] + ['–†–∞–¥—á–∏–∫'] + ['–®–ø–∏–æ–Ω'] + ['–ú–∞—Ç–≤–µ–π']
    elif num_players == 9:
        roles = ['–ö–∞—Ä–∏–Ω–∫–∞', '–°–∞—à–∞ –î–æ–∫—Ç–æ—Ä', '–°–µ–ª—è—Ö'] + ['–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å'] + ['–î—ã—Ç–º–∞–Ω'] + ['–†–∞–¥—á–∏–∫'] + ['–®–ø–∏–æ–Ω'] + ['–ú–∞—Ç–≤–µ–π'] + ['–õ–∏–ª–∏—è –§–µ–¥–æ—Ä–æ–≤–Ω–∞']
    elif num_players == 10:
        roles = ['–ö–∞—Ä–∏–Ω–∫–∞', '–°–∞—à–∞ –î–æ–∫—Ç–æ—Ä', '–°–µ–ª—è—Ö'] + ['–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å'] + ['–î—ã—Ç–º–∞–Ω'] + ['–†–∞–¥—á–∏–∫'] + ['–®–ø–∏–æ–Ω'] + ['–ú–∞—Ç–≤–µ–π'] + ['–õ–∏–ª–∏—è –§–µ–¥–æ—Ä–æ–≤–Ω–∞'] + ['–Æ–ª–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞']
    elif num_players == 11:
        roles = ['–ö–∞—Ä–∏–Ω–∫–∞', '–°–∞—à–∞ –î–æ–∫—Ç–æ—Ä', '–°–µ–ª—è—Ö'] + ['–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å'] + ['–î—ã—Ç–º–∞–Ω'] + ['–†–∞–¥—á–∏–∫'] + ['–®–ø–∏–æ–Ω'] + ['–ú–∞—Ç–≤–µ–π'] + ['–õ–∏–ª–∏—è –§–µ–¥–æ—Ä–æ–≤–Ω–∞'] + ['–Æ–ª–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞'] + ['–ú–∞—Ä–∏–Ω–∞ –í–∏–∫—Ç–æ—Ä–∏—è']
    elif num_players == 12:
        roles = ['–ö–∞—Ä–∏–Ω–∫–∞', '–°–∞—à–∞ –î–æ–∫—Ç–æ—Ä', '–°–µ–ª—è—Ö'] + ['–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å'] + ['–î—ã—Ç–º–∞–Ω'] + ['–†–∞–¥—á–∏–∫'] + ['–®–ø–∏–æ–Ω'] + ['–ú–∞—Ç–≤–µ–π'] + ['–õ–∏–ª–∏—è –§–µ–¥–æ—Ä–æ–≤–Ω–∞'] + ['–Æ–ª–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞'] + ['–ú–∞—Ä–∏–Ω–∞ –í–∏–∫—Ç–æ—Ä–∏—è'] + ['–ü–∞–≤–ª—É—à–∞']
    elif num_players == 13:
        roles = ['–ö–∞—Ä–∏–Ω–∫–∞', '–°–∞—à–∞ –î–æ–∫—Ç–æ—Ä', '–°–µ–ª—è—Ö'] + ['–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å'] * 2 + ['–î—ã—Ç–º–∞–Ω'] + ['–†–∞–¥—á–∏–∫'] + ['–®–ø–∏–æ–Ω'] + ['–ú–∞—Ç–≤–µ–π'] + ['–õ–∏–ª–∏—è –§–µ–¥–æ—Ä–æ–≤–Ω–∞'] + ['–Æ–ª–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞'] + ['–ú–∞—Ä–∏–Ω–∞ –í–∏–∫—Ç–æ—Ä–∏—è'] + ['–ü–∞–≤–ª—É—à–∞'] 
    elif num_players == 14:
        roles = ['–ö–∞—Ä–∏–Ω–∫–∞', '–°–∞—à–∞ –î–æ–∫—Ç–æ—Ä', '–°–µ–ª—è—Ö'] + ['–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å'] * 3 + ['–î—ã—Ç–º–∞–Ω'] + ['–†–∞–¥—á–∏–∫'] + ['–®–ø–∏–æ–Ω'] + ['–ú–∞—Ç–≤–µ–π'] + ['–õ–∏–ª–∏—è –§–µ–¥–æ—Ä–æ–≤–Ω–∞'] + ['–Æ–ª–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞'] + ['–ú–∞—Ä–∏–Ω–∞ –í–∏–∫—Ç–æ—Ä–∏—è'] + ['–ü–∞–≤–ª—É—à–∞'] 
    elif num_players == 15:
        roles = ['–ö–∞—Ä–∏–Ω–∫–∞', '–°–∞—à–∞ –î–æ–∫—Ç–æ—Ä', '–°–µ–ª—è—Ö'] + ['–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å'] * 4 + ['–î—ã—Ç–º–∞–Ω'] + ['–†–∞–¥—á–∏–∫'] + ['–®–ø–∏–æ–Ω'] + ['–ú–∞—Ç–≤–µ–π'] + ['–õ–∏–ª–∏—è –§–µ–¥–æ—Ä–æ–≤–Ω–∞'] + ['–Æ–ª–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞'] + ['–ú–∞—Ä–∏–Ω–∞ –í–∏–∫—Ç–æ—Ä–∏—è'] + ['–ü–∞–≤–ª—É—à–∞']
    elif num_players == 16:
        roles = ['–ö–∞—Ä–∏–Ω–∫–∞', '–°–∞—à–∞ –î–æ–∫—Ç–æ—Ä', '–°–µ–ª—è—Ö'] + ['–ú–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å'] * 5 + ['–î—ã—Ç–º–∞–Ω'] + ['–†–∞–¥—á–∏–∫'] + ['–®–ø–∏–æ–Ω'] + ['–ú–∞—Ç–≤–µ–π'] + ['–õ–∏–ª–∏—è –§–µ–¥–æ—Ä–æ–≤–Ω–∞'] + ['–Æ–ª–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞'] + ['–ú–∞—Ä–∏–Ω–∞ –í–∏–∫—Ç–æ—Ä–∏—è'] + ['–ü–∞–≤–ª—É—à–∞']  
    
    random.shuffle(roles)
    
    for player_id, role in zip(players.keys(), roles):
        roles_assigned[player_id] = role
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ —Å—Ç—Ä–æ–∫
        message = (
            f"<b>üé≠ –í–∞—à–∞ —Ä–æ–ª—å: {role}</b>\n"
            f"{role_descriptions[role]}\n\n"
            f"<b>üí° –°–æ–≤–µ—Ç—ã –ø–æ –∏–≥—Ä–µ:</b>\n" + 
            ''.join(role_tips[role])  # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å–æ–≤–µ—Ç—ã —á–µ—Ä–µ–∑ \n
        )
            
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
        bot.send_message(player_id, message, parse_mode='HTML')

    mafia_id = None
    spy_id = None
    for player_id in players.keys():
        if roles_assigned[player_id] == '–ö–∞—Ä–∏–Ω–∫–∞':
            mafia_id = player_id
        elif roles_assigned[player_id] == '–®–ø–∏–æ–Ω':
            spy_id = player_id

    if mafia_id and spy_id:
        mafia_name = players[mafia_id]
        spy_name = players[spy_id]
        bot.send_message(mafia_id, f"<b>üï∂Ô∏è –í–∞—à —à–ø–∏–æ–Ω: {spy_name}</b>", parse_mode='html')
        bot.send_message(spy_id, f"<b>üïµÔ∏è‚Äç‚ôÇÔ∏è –í–∞—à–∞ –º–∞—Ñ–∏—è: {mafia_name}</b>", parse_mode='html')

    bot.send_message(chat_id, "<b>üé≤ –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! –†–æ–ª–∏ —Ä–æ–∑–¥–∞–Ω—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!</b>", parse_mode='html')

@retry_on_connection_error()
def start_night():
    global is_night, mafia_choice, doctor_choice, mafia_id, commissar_id, commissar_choice, doctor_id, killed_player_name, maniac_id, maniac_choice, lover_id, lover_choice, hobo_id, hobo_choice, spy_choice, spy_id, hacker_id, hacker_choice
    if not game_started:
        return
    is_night = True
    mafia_choice = None
    commissar_choice = None
    lover_choice = None
    doctor_choice = None
    maniac_choice = None
    hobo_choice = None
    spy_choice = None
    hacker_choice = None
    join_button = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É", url=f"https://t.me/{bot.get_me().username}")
    keyboard = types.InlineKeyboardMarkup().add(join_button)
    bot.send_message(chat_id, "<b>üåô –ù–æ—á—å –æ–∫—É—Ç–∞–ª–∞ –≥–æ—Ä–æ–¥!</b>\n<i>–°–∞–º—ã–µ —Å–º–µ–ª—ã–µ –∏ –æ–ø–∞—Å–Ω—ã–µ –≤—ã—à–ª–∏ –Ω–∞ —É–ª–∏—Ü—ã. –£—Ç—Ä–æ–º —É–∑–Ω–∞–µ–º, –∫—Ç–æ –≤—ã–∂–∏–ª...</i>", reply_markup=keyboard, parse_mode="html")
    
    mafia_id = get_mafia_id()
    if mafia_id:
        create_mafia_keyboard(mafia_id)

    threading.Timer(NIGHT_DURATION, end_night).start()

    commissar_id = get_commissar_id()
    if commissar_id:
        create_commissar_keyboard(commissar_id)

    doctor_id = get_doctor_id()
    if doctor_id:
        create_doctor_keyboard(doctor_id)

    if len(playersplay) >= 5:
        lover_id = get_lover_id()
        if lover_id:
            create_lover_keyboard(lover_id)

    if len(playersplay) >= 6:
        maniac_id = get_maniac_id()
        if maniac_id:
            create_maniac_keyboard(maniac_id)

    if len(playersplay) >= 8:
        hobo_id = get_hobo_id()
        if hobo_id:
            create_hobo_keyboard(hobo_id)

    if len(playersplay) >= 7:
        spy_id = get_spy_id()
        if spy_id:
            create_spy_keyboard(spy_id)

    if len(playersplay) >= 12:
        hacker_id = get_hacker_id()
        if hacker_id:
            create_hacker_keyboard(hacker_id)

@retry_on_connection_error()
def create_mafia_keyboard(mafia_id):
    global vibor
    keyboard = types.InlineKeyboardMarkup()
    for player_id in players.keys():
        if player_id != mafia_id and roles_assigned[player_id] != '–®–ø–∏–æ–Ω':
            button = types.InlineKeyboardButton(text=players[player_id], callback_data=f'kill_{player_id}')
            keyboard.add(button)
    vibor = bot.send_message(mafia_id, "<b>üïµÔ∏è‚Äç‚ôÇÔ∏è –ú–∞—Ñ–∏—è, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ—Ä—Ç–≤—É —ç—Ç–æ–π –Ω–æ—á–∏:</b>", reply_markup=keyboard, parse_mode='html')
    return vibor.message_id

@retry_on_connection_error()
def create_commissar_keyboard(commissar_id):
    global viborkom
    keyboard = types.InlineKeyboardMarkup()
    for player_id in players.keys():
        if player_id != commissar_id:
            button = types.InlineKeyboardButton(text=players[player_id], callback_data=f'check_{player_id}')
            keyboard.add(button)
    viborkom = bot.send_message(commissar_id, "<b>üî´ –ö–æ–º–∏—Å—Å–∞—Ä, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>", reply_markup=keyboard, parse_mode='html')
    return viborkom.message_id

@retry_on_connection_error()
def create_doctor_keyboard(doctor_id):
    global vibordok
    keyboard = types.InlineKeyboardMarkup()
    for player_id in players.keys():
        if player_id != doctor_id:
            button = types.InlineKeyboardButton(text=players[player_id], callback_data=f'heal_{player_id}')
            keyboard.add(button)
    vibordok = bot.send_message(doctor_id, "<b>ü©∫ –î–æ–∫—Ç–æ—Ä, –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ —Å–ø–∞—Å—Ç–∏ —ç—Ç–æ–π –Ω–æ—á—å—é:</b>", reply_markup=keyboard, parse_mode='html')
    return vibordok.message_id

@retry_on_connection_error()
def create_maniac_keyboard(maniac_id):
    global vibormaniac
    keyboard = types.InlineKeyboardMarkup()
    for player_id in players.keys():
        if player_id != maniac_id:
            button = types.InlineKeyboardButton(text=players[player_id], callback_data=f'mankill_{player_id}')
            keyboard.add(button)
    vibormaniac = bot.send_message(maniac_id, "<b>üî™ –ú–∞–Ω—å—è–∫, –≤—ã–±–µ—Ä–∏—Ç–µ –∂–µ—Ä—Ç–≤—É —ç—Ç–æ–π –Ω–æ—á–∏:</b>", reply_markup=keyboard, parse_mode='html')
    return vibormaniac.message_id

@retry_on_connection_error()
def create_lover_keyboard(lover_id):
    global viborlover
    keyboard = types.InlineKeyboardMarkup()
    for player_id in players.keys():
        if player_id != lover_id:
            button = types.InlineKeyboardButton(text=players[player_id], callback_data=f'lovercome_{player_id}')
            keyboard.add(button)
    viborlover = bot.send_message(lover_id, "<b>üíÉ –ü—É—Ç–∞–Ω–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, –∫ –∫–æ–º—É –ø–æ–π—Ç–∏ —ç—Ç–æ–π –Ω–æ—á—å—é:</b>", reply_markup=keyboard, parse_mode='html')
    return viborlover.message_id

@retry_on_connection_error()
def create_hobo_keyboard(hobo_id):
    global viborhobo
    keyboard = types.InlineKeyboardMarkup()
    for player_id in players.keys():
        if player_id != hobo_id:
            button = types.InlineKeyboardButton(text=players[player_id], callback_data=f'hobocome_{player_id}')
            keyboard.add(button)
    viborhobo = bot.send_message(hobo_id, "<b>üß≥ –ë–æ–º–∂, –≤—ã–±–µ—Ä–∏—Ç–µ, –∫ –∫–æ–º—É –ø–æ–π—Ç–∏ —ç—Ç–æ–π –Ω–æ—á—å—é:</b>", reply_markup=keyboard, parse_mode='html')
    return viborhobo.message_id

@retry_on_connection_error()
def create_spy_keyboard(spy_id):
    global viborspy
    keyboard = types.InlineKeyboardMarkup()
    for player_id in players.keys():
        if player_id != spy_id and roles_assigned[player_id] != '–ö–∞—Ä–∏–Ω–∫–∞':
            button = types.InlineKeyboardButton(text=players[player_id], callback_data=f'spycheck_{player_id}')
            keyboard.add(button)
    viborspy = bot.send_message(spy_id, "<b>üï∂Ô∏è –®–ø–∏–æ–Ω, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–æ–ª–∏:</b>", reply_markup=keyboard, parse_mode='html')
    return viborspy.message_id

@retry_on_connection_error()
def create_hacker_keyboard(hacker_id):
    global viborhacker
    keyboard = types.InlineKeyboardMarkup()
    for player_id in players.keys():
        if player_id != hacker_id:
            button = types.InlineKeyboardButton(text=players[player_id], callback_data=f'hack_{player_id}')
            keyboard.add(button)
    viborhacker = bot.send_message(hacker_id, "<b>üíæ –ü–∞–≤–ª—É—à–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, —á—Ç–æ–±—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ —Ä–æ–ª—å:</b>", reply_markup=keyboard, parse_mode='html')
    return viborhacker.message_id

@retry_on_connection_error()
def start_voting():
    global voting_active, votes, message_ids
    if not game_started:
        return
    voting_active = True
    votes.clear()
    print("–ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å")
    print("–ù–∞—á–∏–Ω–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ. –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∏–≥—Ä–æ–∫–æ–≤:", players.keys())
    join_button = types.InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –±–æ—Ç—É", url=f"https://t.me/{bot.get_me().username}")
    keyboard = types.InlineKeyboardMarkup().add(join_button)
    bot.send_message(chat_id, "<b>üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å!</b>\n<i>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ –ª–∏–Ω—á–µ–≤–∞—Ç—å.</i>", reply_markup=keyboard, parse_mode='html')

    keyboard = types.InlineKeyboardMarkup()
    for player_id in players.keys():
        button = types.InlineKeyboardButton(text=players[player_id], callback_data=f'vote_{player_id}')
        keyboard.add(button)

    for player_id in players.keys():
        try:
            message = bot.send_message(player_id, "<b>üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ!</b>\n<i>–í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞ –¥–ª—è –∏–∑–≥–Ω–∞–Ω–∏—è:</i>", reply_markup=keyboard, parse_mode='html')
            message_ids[player_id] = message.message_id
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É {player_id}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É {player_id}: {e}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('vote_'))
def handle_vote(call):
    global votes, message_ids
    if voting_active:
        voted_player_id = int(call.data.split('_')[1])
        votes[call.from_user.id] = voted_player_id
        bot.delete_message(call.from_user.id, message_ids[call.from_user.id])
        bot.send_message(call.from_user.id, "<b>üó≥Ô∏è –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω!</b>", parse_mode='html')
        
        # –û–ø–æ–≤–µ—â–∞–µ–º —á–∞—Ç, —á—Ç–æ –∏–≥—Ä–æ–∫ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª (–±–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –∑–∞ –∫–æ–≥–æ)
        voter_name = players.get(call.from_user.id, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–≥—Ä–æ–∫")
        bot.send_message(chat_id, f"<b>üó≥Ô∏è {voter_name} –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª(–∞)!</b>", parse_mode='html')

@retry_on_connection_error()
def end_voting():
    global voting_active
    voting_active = False

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª–∏
    for player_id in players.keys():
        if player_id not in votes and player_id in message_ids:
            try:
                bot.delete_message(player_id, message_ids[player_id])
                print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ–ª–æ—Å–æ–≤–∞–Ω–∏–∏ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player_id}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∏–≥—Ä–æ–∫–∞ {player_id}: {e}")

    vote_count = {}
    for player_id, vote in votes.items():
        if get_user_role(player_id) == '–õ–∏–ª–∏—è –§–µ–¥–æ—Ä–æ–≤–Ω–∞':
            vote_count[vote] = vote_count.get(vote, 0) + 2
        else:
            vote_count[vote] = vote_count.get(vote, 0) + 1

    if vote_count:
        max_votes = max(vote_count.values())
        players_with_max_votes = [player_id for player_id, count in vote_count.items() if count == max_votes]

        if len(players_with_max_votes) > 1:
            bot.send_message(chat_id, "<b>üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –≤–Ω–∏—á—å—é!</b>\n<i>–ù–∏–∫—Ç–æ –Ω–µ –±—ã–ª –∏–∑–≥–Ω–∞–Ω.</i>", parse_mode='html')
        else:
            max_votes_player = players_with_max_votes[0]
            max_votes_player_role = get_user_role(max_votes_player)
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–æ–±–æ–≥–æ —Å–ª—É—á–∞—è –¥–ª—è –ú–∞—Ä–∏–Ω—ã –í–∏–∫—Ç–æ—Ä–∏–∏
            if max_votes_player_role == '–ú–∞—Ä–∏–Ω–∞ –í–∏–∫—Ç–æ—Ä–∏—è':
                bot.send_message(chat_id, 
                               f"<b>üíî {players[max_votes_player]} (–ú–∞—Ä–∏–Ω–∞ –í–∏–∫—Ç–æ—Ä–∏—è) –±—ã–ª–∞ –∫–∞–∑–Ω–µ–Ω–∞!</b>\n"
                               "<i>–û–Ω–∞ –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —É–º—Ä—ë—Ç –≤–º–µ—Å—Ç–µ —Å –Ω–µ–π...</i>", 
                               parse_mode='html')
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∂–µ—Ä—Ç–≤—ã –º–µ—Å—Ç–∏
                keyboard = types.InlineKeyboardMarkup()
                for player_id, player_name in players.items():
                    if player_id != max_votes_player:  # –ù–µ –º–æ–∂–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Å–µ–±—è
                        keyboard.add(types.InlineKeyboardButton(
                            player_name, 
                            callback_data=f'revenge_{player_id}'))
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∫–∞–∑–Ω–µ–Ω–Ω–æ–π –ª—é–±–æ–≤–Ω–∏—Ü—ã
                global revenge_victim
                revenge_victim = max_votes_player
                
                bot.send_message(max_votes_player, 
                               "<b>üíî –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —É–º—Ä—ë—Ç –≤–º–µ—Å—Ç–µ —Å –≤–∞–º–∏:</b>", parse_mode='html',
                               reply_markup=keyboard)
            else:
                # –û–±—ã—á–Ω—ã–π —Å–ª—É—á–∞–π –∫–∞–∑–Ω–∏
                bot.send_message(chat_id, 
                               f"<b>üó≥Ô∏è –ò–≥—Ä–æ–∫ {players[max_votes_player]} –±—ã–ª –∏–∑–≥–Ω–∞–Ω!</b>\n"
                               f"<i>–ï–≥–æ —Ä–æ–ª—å: {max_votes_player_role}</i>", 
                               parse_mode='html')
                remove_player(max_votes_player)
    else:
        bot.send_message(chat_id, "<b>üó≥Ô∏è –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å –±–µ–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.</b>\n<i>–ù–∏–∫—Ç–æ –Ω–µ –ø—Ä–æ–≥–æ–ª–æ—Å–æ–≤–∞–ª.</i>", parse_mode='html')


@bot.callback_query_handler(func=lambda call: call.data.startswith('revenge_'))
def handle_revenge(call):
    global revenge_victim
    player_id_to_kill = int(call.data.split('_')[1])
    
    # –£–¥–∞–ª—è–µ–º –ª—é–±–æ–≤–Ω–∏—Ü—É
    bot.send_message(chat_id, 
                   f"üíî {players[revenge_victim]} (–ú–∞—Ä–∏–Ω–∞ –í–∏–∫—Ç–æ—Ä–∏—è) –∑–∞–±—Ä–∞–ª–∞ —Å —Å–æ–±–æ–π {players[player_id_to_kill]}!",
                   parse_mode="HTML")
    
    # –£–¥–∞–ª—è–µ–º –æ–±–æ–∏—Ö –∏–≥—Ä–æ–∫–æ–≤
    remove_player(revenge_victim)
    remove_player(player_id_to_kill)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    bot.delete_message(call.message.chat.id, call.message.message_id)
    bot.answer_callback_query(call.id, "–ú—â–µ–Ω–∏–µ —Å–æ–≤–µ—Ä—à–µ–Ω–æ!")

def get_mafia_id():
    for player_id in players.keys():
        if roles_assigned[player_id] == '–ö–∞—Ä–∏–Ω–∫–∞':
            return player_id
    return None

def get_maniac_id():
    for player_id in players.keys():
        if roles_assigned[player_id] == '–†–∞–¥—á–∏–∫':
            return player_id
    return None

def get_commissar_id():
    for player_id in players.keys():
        if roles_assigned[player_id] == "–°–µ–ª—è—Ö":
            print(f"Found commissar ID: {player_id}")
            return player_id
    return None

def get_doctor_id():
    for player_id in players.keys():
        if roles_assigned[player_id] == "–°–∞—à–∞ –î–æ–∫—Ç–æ—Ä":
            print(f"Found doctor ID: {player_id}")
            return player_id
    return None

def get_lover_id():
    for player_id in players.keys():
        if roles_assigned[player_id] == "–î—ã—Ç–º–∞–Ω":
            print(f"Found lover ID: {player_id}")
            return player_id
    return None

def get_hobo_id():
    for player_id in players.keys():
        if roles_assigned[player_id] == "–ú–∞—Ç–≤–µ–π":
            return player_id
    return None

def get_spy_id():
    for player_id in players.keys():
        if roles_assigned[player_id] == '–®–ø–∏–æ–Ω':
            return player_id
    return None

def get_hacker_id():
    for player_id in players.keys():
        if roles_assigned[player_id] == '–ü–∞–≤–ª—É—à–∞':
            return player_id
    return None

def get_user_role(user_id):
    return roles_assigned.get(user_id)

def get_alive_players():
    alive_players = [username for player_id, username in players.items() if player_id in roles_assigned]
    return alive_players

def get_mafia_nick():
    for player_id in players:
        if get_user_role(player_id) == '–ö–∞—Ä–∏–Ω–∫–∞':
            return players[player_id]
    return None

def get_commissar_nick():
    for player_id in players:
        if get_user_role(player_id) == '–°–µ–ª—è—Ö':
            return players[player_id]
    return None

def get_maniac_nick():
    for player_id in players:
        if get_user_role(player_id) == '–†–∞–¥—á–∏–∫':
            return players[player_id]
    return None

@retry_on_connection_error()
def update_registered_users_message():
    global players, message_text
    players_list = "\n".join(players.values())
    message_text = f"<b>üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏:</b>\n\n{players_list}"
    bot.edit_message_text(chat_id=chat_id, message_id=reg_id, text="<b>üìã –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –∏–≥—Ä—É –≤ –º–∞—Ñ–∏—é –Ω–∞—á–∞—Ç–∞!</b>\n\n" + message_text, reply_markup=keyboardd, parse_mode='html')

@bot.callback_query_handler(func=lambda call: call.data == "join_game")
def handle_join_game(call):
    user_id = call.from_user.id
    username = call.from_user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
    
    players[user_id] = username
    bot.send_message(user_id, "<b>üë§ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ!</b>\n<i>–í–≤–µ–¥–∏—Ç–µ /join –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.</i>", parse_mode='html')

@bot.callback_query_handler(func=lambda call: True)
@retry_on_connection_error()
def handle_callback_query(call):
    global mafia_choice, commissar_id, commissar_choice, doctor_choice, killed_player_name, votes, message_ids, maniac_choice, vibormaniac, lover_choice, lover_id, hobo_choice, spy_choice, hacker_choice
    
    if is_night and call.from_user.id in players:
        user_role = get_user_role(call.from_user.id)
        
        if user_role == '–ö–∞—Ä–∏–Ω–∫–∞':
            mafia_choice = call.data.split('_')[1]
            if int(mafia_choice) in players:
                bot.delete_message(call.from_user.id, vibor.message_id)
                bot.send_message(mafia_id, "<b>üïµÔ∏è‚Äç‚ôÇÔ∏è –í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω!</b>\n<i>–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –¥–Ω—è.</i>", parse_mode='html')
            else:
                bot.send_message(call.from_user.id, "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n<i>–í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.</i>", parse_mode='html')
                
        elif user_role == '–°–µ–ª—è—Ö':
            commissar_choice = call.data.split('_')[1]
            if int(commissar_choice) in players:
                bot.delete_message(call.from_user.id, viborkom.message_id)
                bot.send_message(commissar_id, "<b>üî´ –í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω!</b>\n<i>–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –¥–Ω—è.</i>", parse_mode='html')
            else:
                bot.send_message(call.from_user.id, "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n<i>–í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.</i>", parse_mode='html')

        elif user_role == '–°–∞—à–∞ –î–æ–∫—Ç–æ—Ä':
            doctor_choice = call.data.split('_')[1]
            if int(doctor_choice) in players:
                bot.delete_message(call.from_user.id, vibordok.message_id)
                bot.send_message(call.from_user.id, "<b>ü©∫ –í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω!</b>\n<i>–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –¥–Ω—è.</i>", parse_mode='html')
            else:
                bot.send_message(call.from_user.id, "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n<i>–í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.</i>", parse_mode='html')

        elif user_role == '–î—ã—Ç–º–∞–Ω' and len(playersplay) >= 5:
            lover_choice = call.data.split('_')[1]
            if int(lover_choice) in players:
                bot.delete_message(call.from_user.id, viborlover.message_id)
                bot.send_message(call.from_user.id, "<b>üíÉ –í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω!</b>\n<i>–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –¥–Ω—è.</i>", parse_mode='html')
            else:
                bot.send_message(call.from_user.id, "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n<i>–í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.</i>", parse_mode='html')

        elif user_role == '–†–∞–¥—á–∏–∫' and len(playersplay) >= 6:
            maniac_choice = call.data.split('_')[1]
            if int(maniac_choice) in players:
                bot.delete_message(call.from_user.id, vibormaniac.message_id)
                bot.send_message(call.from_user.id, "<b>üî™ –í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω!</b>\n<i>–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –¥–Ω—è.</i>", parse_mode='html')
            else:
                bot.send_message(call.from_user.id, "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n<i>–í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.</i>", parse_mode='html')

        elif user_role == '–ú–∞—Ç–≤–µ–π' and len(playersplay) >= 8:
            hobo_choice = call.data.split('_')[1]
            if int(hobo_choice) in players:
                bot.delete_message(call.from_user.id, viborhobo.message_id)
                bot.send_message(call.from_user.id, "<b>üß≥ –í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω!</b>\n<i>–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –¥–Ω—è.</i>", parse_mode='html')
            else:
                bot.send_message(call.from_user.id, "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n<i>–í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.</i>", parse_mode='html')

        elif user_role == '–®–ø–∏–æ–Ω' and len(playersplay) >= 7:
            spy_choice = call.data.split('_')[1]
            if int(spy_choice) in players:
                bot.delete_message(call.from_user.id, viborspy.message_id)
                bot.send_message(call.from_user.id, "<b>üï∂Ô∏è –í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω!</b>\n<i>–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –¥–Ω—è.</i>", parse_mode='html')
            else:
                bot.send_message(call.from_user.id, "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n<i>–í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.</i>", parse_mode='html')

        elif user_role == '–ü–∞–≤–ª—É—à–∞' and len(playersplay) >= 12:
            hacker_choice = call.data.split('_')[1]
            if int(hacker_choice) in players:
                bot.delete_message(call.from_user.id, viborhacker.message_id)
                bot.send_message(call.from_user.id, "<b>üíæ –í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω!</b>\n<i>–û–∂–∏–¥–∞–π—Ç–µ –Ω–∞—á–∞–ª–∞ –¥–Ω—è.</i>", parse_mode='html')
            else:
                bot.send_message(call.from_user.id, "<b>‚ùå –û—à–∏–±–∫–∞!</b>\n<i>–í—ã–±—Ä–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.</i>", parse_mode='html')
        
    if voting_active and call.data.startswith('vote_'):
        voted_player_id = int(call.data.split('_')[1])
        votes[call.from_user.id] = voted_player_id
        bot.delete_message(call.from_user.id, message_ids[call.from_user.id])
        bot.send_message(call.from_user.id, "<b>üó≥Ô∏è –í–∞—à –≥–æ–ª–æ—Å —É—á—Ç—ë–Ω!</b>", parse_mode='html')

@retry_on_connection_error()
def remove_player(player_id):
    if player_id in players:
        del players[player_id]
        del roles_assigned[player_id]

@retry_on_connection_error()
def check_game_status():
    alive_players = get_alive_players()
    mafia_alive = any(get_user_role(player_id) == '–ö–∞—Ä–∏–Ω–∫–∞' for player_id in players)

    
    if mafia_alive and len(alive_players) > 2:
        return
    else:
        if len(alive_players) == 1:
            bot.send_message(chat_id, "<b>üèÜ –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø–æ–±–µ–¥–∏–ª–∏!</b>\n<i>–ú–∞—Ñ–∏—è –±—ã–ª–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞!</i>", parse_mode='html')
            reset_game()
        elif len(alive_players) == 2:
            if mafia_alive:
                bot.send_message(chat_id, "<b>üèÜ –ú–∞—Ñ–∏—è –ø–æ–±–µ–¥–∏–ª–∞!</b>\n<i>–û—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –º–∞—Ñ–∏—è –∏ –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å.</i>", parse_mode='html')
            else:
                bot.send_message(chat_id, "<b>üèÜ –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø–æ–±–µ–¥–∏–ª–∏!</b>\n<i>–ú–∞—Ñ–∏—è –±—ã–ª–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞!</i>", parse_mode='html')
            reset_game()
        elif not mafia_alive and len(alive_players) > 1: 
            bot.send_message(chat_id, "<b>üèÜ –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø–æ–±–µ–¥–∏–ª–∏!</b>\n<i>–ú–∞—Ñ–∏—è –±—ã–ª–∞ —É–Ω–∏—á—Ç–æ–∂–µ–Ω–∞!</i>", parse_mode='html')
            reset_game()

@retry_on_connection_error()
def check_game_status_maniac():
    alive_players = get_alive_players()
    maniac_alive = any(get_user_role(player_id) == '–†–∞–¥—á–∏–∫' for player_id in players)
    werewolf_alive = any(get_user_role(player_id) == '–Æ–ª–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞' for player_id in players)

    if werewolf_alive:
        for player_id in players:
            if get_user_role(player_id) == '–Æ–ª–∏—è –°–µ—Ä–≥–µ–µ–≤–Ω–∞':
                roles_assigned[player_id] = '–ö–∞—Ä–∏–Ω–∫–∞'
                bot.send_message(chat_id, f"<b>üê∫ –û–±–æ—Ä–æ—Ç–µ–Ω—å —Å—Ç–∞–ª —á–∞—Å—Ç—å—é –º–∞—Ñ–∏–∏!</b>", parse_mode='html')
                break

    mafia_alive = any(get_user_role(player_id) == '–ö–∞—Ä–∏–Ω–∫–∞' for player_id in players)
    if mafia_alive or maniac_alive and len(alive_players) > 2:
        return
    else:
        if len(alive_players) == 1:

            bot.send_message(chat_id, "<b>üèÜ –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø–æ–±–µ–¥–∏–ª–∏!</b>\n<i>–í—Å–µ –∑–ª–æ–¥–µ–∏ –±—ã–ª–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã!</i>", parse_mode='html')
            reset_game()
        elif len(alive_players) == 2:
            if mafia_alive and not maniac_alive:
                bot.send_message(chat_id, "<b>üèÜ –ú–∞—Ñ–∏—è –ø–æ–±–µ–¥–∏–ª–∞!</b>\n<i>–û—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –º–∞—Ñ–∏—è –∏ –º–∏—Ä–Ω—ã–π –∂–∏—Ç–µ–ª—å.</i>", parse_mode='html')
            elif maniac_alive and mafia_alive:
                bot.send_message(chat_id, "<b>üèÜ –ú–∞–Ω—å—è–∫ –ø–æ–±–µ–¥–∏–ª!</b>\n<i>–û—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –º–∞–Ω—å—è–∫ –∏ –µ–≥–æ –∂–µ—Ä—Ç–≤–∞.</i>", parse_mode='html')
            elif maniac_alive and not mafia_alive:
                bot.send_message(chat_id, "<b>üèÜ –ú–∞–Ω—å—è–∫ –ø–æ–±–µ–¥–∏–ª!</b>\n<i>–û—Å—Ç–∞–ª–∏—Å—å —Ç–æ–ª—å–∫–æ –º–∞–Ω—å—è–∫ –∏ –µ–≥–æ –∂–µ—Ä—Ç–≤–∞.</i>", parse_mode='html')
            else:
                bot.send_message(chat_id, "<b>üèÜ –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø–æ–±–µ–¥–∏–ª–∏!</b>\n<i>–í—Å–µ –∑–ª–æ–¥–µ–∏ –±—ã–ª–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã!</i>", parse_mode='html')
            reset_game()
        elif not mafia_alive and not maniac_alive and len(alive_players) > 1:
            bot.send_message(chat_id, "<b>üèÜ –ú–∏—Ä–Ω—ã–µ –∂–∏—Ç–µ–ª–∏ –ø–æ–±–µ–¥–∏–ª–∏!</b>\n<i>–í—Å–µ –∑–ª–æ–¥–µ–∏ –±—ã–ª–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã!</i>", parse_mode='html')
            reset_game()

@retry_on_connection_error()
def end_night():
    global is_night, mafia_choice, commissar_choice, doctor_choice, killed_player_name, alive_players, maniac_choice, mafia_id, commissar_id, lover_choice, hobo_choice, spy_choice, spy_id, hobo_id, lover_id, doctor_id, hacker_choice, hacker_id
    if not game_started:
        return
    is_night = False
    bot.send_message(chat_id, "<b>üåû –ù–æ—á—å –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å!</b>\n<i>–ì–æ—Ä–æ–¥ –ø—Ä–æ—Å—ã–ø–∞–µ—Ç—Å—è, –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ—Ç–µ—Ä–∏...</i>", parse_mode='html')

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º –¥–ª—è —Ä–æ–ª–µ–π, –µ—Å–ª–∏ –≤—ã–±–æ—Ä –Ω–µ –±—ã–ª —Å–¥–µ–ª–∞–Ω
    if mafia_id and mafia_choice is None:
        try:
            bot.delete_message(mafia_id, vibor.message_id)
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –º–∞—Ñ–∏–∏ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {mafia_id}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞—Ñ–∏–∏: {e}")

    if commissar_id and commissar_choice is None:
        try:
            bot.delete_message(commissar_id, viborkom.message_id)
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –∫–æ–º–∏—Å—Å–∞—Ä–∞ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {commissar_id}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–æ–º–∏—Å—Å–∞—Ä–∞: {e}")

    if doctor_id and doctor_choice is None:
        try:
            bot.delete_message(doctor_id, vibordok.message_id)
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –¥–æ–∫—Ç–æ—Ä–∞ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {doctor_id}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–æ–∫—Ç–æ—Ä–∞: {e}")

    if len(playersplay) >= 5 and lover_id and lover_choice is None:
        try:
            bot.delete_message(lover_id, viborlover.message_id)
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –ø—É—Ç–∞–Ω—ã —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {lover_id}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—É—Ç–∞–Ω—ã: {e}")

    if len(playersplay) >= 6 and maniac_id and maniac_choice is None:
        try:
            bot.delete_message(maniac_id, vibormaniac.message_id)
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –º–∞–Ω—å—è–∫–∞ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {maniac_id}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–∞–Ω—å—è–∫–∞: {e}")
    
    if len(playersplay) >= 8 and hobo_id and hobo_choice is None:
        try:
            bot.delete_message(hobo_id, viborhobo.message_id)
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ –±–æ–º–∂–∞ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {hobo_id}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ–º–∂–∞: {e}")

    if len(playersplay) >= 7 and spy_id and spy_choice is None:
        try:
            bot.delete_message(spy_id, viborspy.message_id)
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ —à–ø–∏–æ–Ω–∞ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {spy_id}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —à–ø–∏–æ–Ω–∞: {e}")

    if len(playersplay) >= 12 and hacker_id and hacker_choice is None:
        try:
            bot.delete_message(hacker_id, viborhacker.message_id)
            print(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã–±–æ—Ä–µ —Ö–∞–∫–µ—Ä–∞ —É–¥–∞–ª–µ–Ω–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞ {hacker_id}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ö–∞–∫–µ—Ä–∞: {e}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª —Ö–∞–∫–µ—Ä
    blocked_player_id = None
    if hacker_choice is not None and int(hacker_choice) in players:
        blocked_player_id = int(hacker_choice)

    start_day()

    # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Ä–æ–ª–µ–π
    if blocked_player_id:
        blocked_role = get_user_role(blocked_player_id)
        if blocked_role == '–ö–∞—Ä–∏–Ω–∫–∞':
            mafia_choice = None
        elif blocked_role == '–°–µ–ª—è—Ö':
            commissar_choice = None
        elif blocked_role == '–°–∞—à–∞ –î–æ–∫—Ç–æ—Ä':
            doctor_choice = None
        elif blocked_role == '–î—ã—Ç–º–∞–Ω':
            lover_choice = None
        elif blocked_role == '–†–∞–¥—á–∏–∫':
            maniac_choice = None
        elif blocked_role == '–ú–∞—Ç–≤–µ–π':
            hobo_choice = None
        elif blocked_role == '–®–ø–∏–æ–Ω':
            spy_choice = None

    if mafia_choice is not None and int(mafia_choice) in players:
        killed_player_name = players[int(mafia_choice)]
        killed_player_role = get_user_role(int(mafia_choice))
        if doctor_choice is not None and doctor_choice == mafia_choice:
            bot.send_message(chat_id, f"<b>ü©∫ –î–æ–∫—Ç–æ—Ä —Å–ø–∞—Å {killed_player_name} –æ—Ç –º–∞—Ñ–∏–∏!</b>", parse_mode='html')
        elif len(playersplay) >= 5:
            if lover_choice == mafia_id:
                lover_id = get_lover_id()
                print("lover vibral mafia")
                bot.send_message(lover_id, f"<b>üíÉ –í—ã —Å–ø–∞—Å–ª–∏ –∫–æ–≥–æ-—Ç–æ –æ—Ç —Å–º–µ—Ä—Ç–∏!</b>", parse_mode='html')
            elif mafia_choice != doctor_choice and lover_choice != mafia_id:
                bot.send_message(int(mafia_choice), f"<b>üíÄ –í—ã –±—ã–ª–∏ —É–±–∏—Ç—ã –Ω–æ—á—å—é!</b>\n<i>–ú–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ª–æ–≤–∞:</i>", parse_mode='html')
                bot.send_message(chat_id, f"<b>üïµÔ∏è‚Äç‚ôÇÔ∏è –ù–æ—á—å—é –±—ã–ª —É–±–∏—Ç {killed_player_name}.</b>\n<i>–ï–≥–æ —Ä–æ–ª—å: {killed_player_role}</i>", parse_mode='html')
                remove_player(int(mafia_choice))
        elif doctor_choice != mafia_choice and len(playersplay) < 5:
            bot.send_message(int(mafia_choice), f"<b>üíÄ –í—ã –±—ã–ª–∏ —É–±–∏—Ç—ã –Ω–æ—á—å—é!</b>\n<i>–ú–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ª–æ–≤–∞:</i>", parse_mode='html')
            bot.send_message(chat_id, f"<b>üïµÔ∏è‚Äç‚ôÇÔ∏è –ù–æ—á—å—é –±—ã–ª —É–±–∏—Ç {killed_player_name}.</b>\n<i>–ï–≥–æ —Ä–æ–ª—å: {killed_player_role}</i>", parse_mode='html')
            remove_player(int(mafia_choice))

    if commissar_choice is not None and int(commissar_choice) in players:
        checked_player_name = players[int(commissar_choice)]
        checked_player_role = get_user_role(int(commissar_choice))
        if doctor_choice == commissar_choice:
            bot.send_message(chat_id, f"<b>ü©∫ –î–æ–∫—Ç–æ—Ä —Å–ø–∞—Å {checked_player_name} –æ—Ç –≤—ã—Å—Ç—Ä–µ–ª–∞ –°–µ–ª—è—Ö!</b>", parse_mode='html')
        elif len(playersplay) >= 5:
            if lover_choice == commissar_id:
                lover_id = get_lover_id()
                print("lover vibral comisara")
                bot.send_message(lover_id, f"<b>üíÉ –í—ã —Å–ø–∞—Å–ª–∏ –∫–æ–≥–æ-—Ç–æ –æ—Ç —Å–º–µ—Ä—Ç–∏!</b>", parse_mode='html')
            elif doctor_choice != commissar_choice and lover_choice != commissar_id:
                bot.send_message(int(commissar_choice), f"<b>üíÄ –í—ã –±—ã–ª–∏ —É–±–∏—Ç—ã –Ω–æ—á—å—é!</b>\n<i>–ú–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ª–æ–≤–∞:</i>", parse_mode='html')
                bot.send_message(chat_id, f"<b>üî´ –°–µ–ª—è—Ö –ø—Ä–æ–≤–µ—Ä–∏–ª–∞ –≤—ã—Å—Ç—Ä–µ–ª–æ–º {checked_player_name}.</b>\n<i>–ï–≥–æ —Ä–æ–ª—å: {checked_player_role}</i>", parse_mode='html')
                remove_player(int(commissar_choice))
        elif doctor_choice != commissar_choice and len(playersplay) < 5:
            bot.send_message(int(commissar_choice), f"<b>üíÄ –í—ã –±—ã–ª–∏ —É–±–∏—Ç—ã –Ω–æ—á—å—é!</b>\n<i>–ú–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ª–æ–≤–∞:</i>", parse_mode='html')
            bot.send_message(chat_id, f"<b>üî´ –°–µ–ª—è—Ö –ø—Ä–æ–≤–µ—Ä–∏–ª–∞ –≤—ã—Å—Ç—Ä–µ–ª–æ–º {checked_player_name}.</b>\n<i>–ï–≥–æ —Ä–æ–ª—å: {checked_player_role}</i>", parse_mode='html')
            remove_player(int(commissar_choice))

    if doctor_choice is not None and int(doctor_choice) in players:
        if doctor_choice != mafia_choice and maniac_choice and commissar_choice:
            doctor_id = get_doctor_id()
            bot.send_message(doctor_id, f"<b>ü©∫ –í–∞—à–∏ —É—Å–ª—É–≥–∏ –Ω–µ –ø–æ–Ω–∞–¥–æ–±–∏–ª–∏—Å—å —ç—Ç–æ–π –Ω–æ—á—å—é.</b>", parse_mode='html')

    if len(playersplay) >= 6:
        if maniac_choice is not None and int(maniac_choice) in players:
            mkilled_player_name = players[int(maniac_choice)]
            mkilled_player_role = get_user_role(int(maniac_choice))
            if doctor_choice == maniac_choice:
                bot.send_message(chat_id, f"<b>ü©∫ –î–æ–∫—Ç–æ—Ä —Å–ø–∞—Å {mkilled_player_name} –æ—Ç –º–∞–Ω—å—è–∫–∞!</b>", parse_mode='html')
            elif len(playersplay) >= 5:
                if lover_choice == maniac_id:
                    lover_id = get_lover_id()
                    bot.send_message(lover_id, f"<b>üíÉ –í—ã —Å–ø–∞—Å–ª–∏ –∫–æ–≥–æ-—Ç–æ –æ—Ç –º—É—á–∏—Ç–µ–ª—å–Ω–æ–π —Å–º–µ—Ä—Ç–∏!</b>", parse_mode='html')
                elif doctor_choice != maniac_choice and lover_choice != maniac_id:
                    bot.send_message(int(maniac_choice), f"<b>üíÄ –í—ã –±—ã–ª–∏ —É–±–∏—Ç—ã –Ω–æ—á—å—é!</b>\n<i>–ú–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–ª–æ–≤–∞:</i>", parse_mode='html')
                    bot.send_message(chat_id, f"<b>üî™ –ù–æ—á—å—é –º–∞–Ω—å—è–∫ —É–±–∏–ª {mkilled_player_name}.</b>\n<i>–ï–≥–æ —Ä–æ–ª—å: {mkilled_player_role}</i>", parse_mode='html')
                    remove_player(int(maniac_choice))

    if len(playersplay) >= 8:
        if hobo_choice is not None:
            hobo_id = get_hobo_id()
            if hobo_choice is not None and hobo_choice == mafia_choice:
                killer = get_mafia_nick()
                bot.send_message(hobo_id, f"<b>üß≥ –¢—ã –≤–∏–¥–µ–ª {killer} –Ω–∞ –º–µ—Å—Ç–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è!</b>", parse_mode='html')
            elif hobo_choice is not None and hobo_choice == commissar_choice:
                comkiller = get_commissar_nick()
                bot.send_message(hobo_id, f"<b>üß≥ –¢—ã –≤–∏–¥–µ–ª {comkiller} –Ω–∞ –º–µ—Å—Ç–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è!</b>", parse_mode='html')
            elif hobo_choice is not None and hobo_choice == maniac_choice:
                mankiller = get_maniac_nick()
                bot.send_message(hobo_id, f"<b>üß≥ –¢—ã –≤–∏–¥–µ–ª {mankiller} –Ω–∞ –º–µ—Å—Ç–µ –ø—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏—è!</b>", parse_mode='html')
            elif hobo_choice is not None:
                bot.send_message(hobo_id, f"<b>üß≥ –¢—ã –Ω–∏—á–µ–≥–æ –Ω–µ —É–≤–∏–¥–µ–ª —ç—Ç–æ–π –Ω–æ—á—å—é.</b>", parse_mode='html')

    if len(playersplay) >= 7:
        if spy_choice is not None and int(spy_choice) in players:
            spy_id = get_spy_id()
            mafia_id = get_mafia_id()
            spy_checked_player_name = players[int(spy_choice)]
            spy_checked_player_role = get_user_role(int(spy_choice))
            if spy_id:
                bot.send_message(spy_id, f"<b>üï∂Ô∏è –í—ã —É–∑–Ω–∞–ª–∏, —á—Ç–æ {spy_checked_player_name} –∏–º–µ–µ—Ç —Ä–æ–ª—å: {spy_checked_player_role}</b>", parse_mode='html')
            if mafia_id:
                bot.send_message(mafia_id, f"<b>üï∂Ô∏è –®–ø–∏–æ–Ω —Å–æ–æ–±—â–∞–µ—Ç: {spy_checked_player_name} –∏–º–µ–µ—Ç —Ä–æ–ª—å: {spy_checked_player_role}</b>", parse_mode='html')

    if len(playersplay) >= 6:
        check_game_status_maniac()
    elif len(playersplay) < 6:
        check_game_status()

    if game_started:
        alive_players = get_alive_players()
        bot.send_message(chat_id, f"<b>üë• –ñ–∏–≤—ã–µ –∏–≥—Ä–æ–∫–∏:</b> {', '.join(alive_players)}", parse_mode='html')
        roles_set = set()
        for player_id in players:
            player_role = get_user_role(player_id)
            if player_role is not None:
                roles_set.add(player_role)
        roles_message = "<b>üé≠ –°—Ä–µ–¥–∏ –Ω–∏—Ö:</b>\n" + "\n".join([f"{role}" for role in roles_set])
        bot.send_message(chat_id, roles_message, parse_mode='html')

@retry_on_connection_error()
def reset_game():
    global game_started, players, roles_assigned, is_night, mafia_choice, commissar_choice, doctor_choice, maniac_choice, lover_choice, hobo_choice, spy_choice, hacker_choice
    game_started = False
    players.clear()
    roles_assigned.clear()
    is_night = False
    mafia_choice = None
    commissar_choice = None
    doctor_choice = None
    maniac_choice = None
    lover_choice = None
    hobo_choice = None
    spy_choice = None
    hacker_choice = None

@retry_on_connection_error()
def start_day():
    global is_night
    if not game_started:
        return
    is_night = False
    threading.Timer(DAY_DURATION, end_day).start()
    bot.send_message(chat_id, f"<b>üåû –î–µ–Ω—å –Ω–∞—Å—Ç—É–ø–∏–ª!</b>\n<i>–£ –≤–∞—Å –µ—Å—Ç—å {DAY_DURATION // 60} –º–∏–Ω—É—Ç –Ω–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏–µ. –†–µ—à–∞–π—Ç–µ, –∫—Ç–æ –≤–∏–Ω–æ–≤–µ–Ω! üó≥Ô∏è</i>", parse_mode='html')
    threading.Timer(PERERIV_DURATION, start_voting).start()

@retry_on_connection_error()
def end_day():
    global is_night, mafia_choice, commissar_choice, doctor_choice, killed_player_name, playersplay
    if not game_started:
        return
    end_voting()
    print(playersplay)
    if len(playersplay) >= 6:
        check_game_status_maniac()
    elif len(playersplay) < 6:
        check_game_status()
    if game_started:
        start_night()

@bot.message_handler(commands=['test'])
def handle_test(message):
    logger.info(f"–í—ã–∑–≤–∞–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ /test: user_id={message.from_user.id}, chat_id={message.chat.id}, text={message.text}")
    try:
        bot.reply_to(message, "‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω! –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω.")
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ /test —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ chat_id={message.chat.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è /test: {str(e)}")

# Webhook endpoint
@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        logger.info("–ü–æ–ª—É—á–µ–Ω –≤—Ö–æ–¥—è—â–∏–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–µ–±—Ö—É–∫")
        json_data = request.get_json()
        if not json_data:
            logger.error("–ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞")
            return jsonify({"error": "Empty request"}), 400
        update = telebot.types.Update.de_json(json_data)
        if not update:
            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å Update")
            return jsonify({"error": "Invalid Update"}), 400
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {json_data}")
        if update.message:
            logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text} –æ—Ç user_id={update.message.from_user.id}")
        elif update.callback_query:
            logger.info(f"Callback: {update.callback_query.data} –æ—Ç user_id={update.callback_query.from_user.id}")
        logger.info("–ü–µ—Ä–µ–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ bot.process_new_updates")
        try:
            bot.process_new_updates([update])
            logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ bot.process_new_updates: {str(e)}")
        return jsonify({"status": "ok"}), 200
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –≤–µ–±—Ö—É–∫–µ: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route('/')
def health_check():
    return 'Bot is running', 200

@app.route('/test_telegram')
def test_telegram():
    try:
        bot_info = bot.get_me()
        logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ: @{bot_info.username}")
        bot.send_message(716559083, "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞")
        logger.info("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        return jsonify({"status": "ok", "bot": bot_info.username})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Telegram: {str(e)}")
        return jsonify({"error": str(e)}), 500

@app.route('/check_webhook')
def check_webhook_status():
    try:
        webhook_info = bot.get_webhook_info()
        return jsonify({
            'webhook_url': webhook_info.url,
            'pending_update_count': webhook_info.pending_update_count,
            'last_error_date': webhook_info.last_error_date,
            'last_error_message': webhook_info.last_error_message
        })
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == '__main__':
    set_webhook()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é
    app.run(host='0.0.0.0', port=int(os.getenv('PORT', 10000)))